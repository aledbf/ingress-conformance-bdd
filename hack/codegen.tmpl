package {{ .Package }}

import (
	"github.com/cucumber/godog"
	"github.com/cucumber/messages-go/v10"

	tstate "github.com/aledbf/ingress-conformance-bdd/test/state"
	"github.com/aledbf/ingress-conformance-bdd/test/utils"
)

var (
	// holds state of the scenarario
	state *tstate.Scenario
)

{{ range .NewFunctions }}func {{ .Name }}{{ argsFromMap .Args }} error {
	return godog.ErrPending
}

{{end}}

func FeatureContext(s *godog.Suite) { {{ range .NewFunctions }}
	s.Step({{ backticked .Expr | unescape }}, {{ .Name }}){{end}}

	s.BeforeScenario(func(this *messages.Pickle) {
		state = tstate.New(nil)
	})

	s.AfterScenario(func(*messages.Pickle, error) {
		// delete namespace an all the content
		_ = utils.DeleteKubeNamespace(utils.KubeClient, state.Namespace)
	})
}
